#!/bin/bash
# video-tool2.sh — fully functional bash video toolbox with fzf main menu

# Output directories
VIDEO_OUT_DIR="$HOME/Videos"
MERGE_OUT_DIR="$VIDEO_OUT_DIR/merged"
SPLIT_OUT_DIR="$VIDEO_OUT_DIR/split"
GIF_OUT_DIR="$VIDEO_OUT_DIR/gifs"
THUMB_OUT_DIR="$VIDEO_OUT_DIR/thumbnails"
CONVERT_OUT_DIR="$VIDEO_OUT_DIR/converted"

mkdir -p "$MERGE_OUT_DIR" "$SPLIT_OUT_DIR" "$GIF_OUT_DIR" "$THUMB_OUT_DIR" "$CONVERT_OUT_DIR"

# --- fzf multi-select ---
select_multiple_with_fzf() {
    local prompt="$1"
    shift
    printf '%s\n' "$@" | fzf --multi --height=15 --border --prompt="$prompt > " \
        --preview 'ffprobe -hide_banner {} 2>&1 | head -n 20'
}

# --- Merge videos safely ---
merge_videos() {
    local tmp
    tmp=$(mktemp)
    for f in "$@"; do
        local esc="${f//\'/\'\\\'\'}"
        echo "file '$esc'" >> "$tmp"
    done
    local out="$MERGE_OUT_DIR/merged_$(date +%Y%m%d_%H%M%S).mkv"
    ffmpeg -f concat -safe 0 -i "$tmp" -c copy "$out"
    rm "$tmp"
    echo "✅ Merged file: $out"
}

# --- Merge & Compress videos ---
merge_and_compress() {
    local tmp
    tmp=$(mktemp)
    for f in "$@"; do
        local esc="${f//\'/\'\\\'\'}"
        echo "file '$esc'" >> "$tmp"
    done
    local out="$MERGE_OUT_DIR/merged_compressed_$(date +%Y%m%d_%H%M%S).mp4"
    ffmpeg -f concat -safe 0 -i "$tmp" -c:v libx265 -preset fast -crf 28 -c:a aac -b:a 128k "$out"
    rm "$tmp"
    echo "✅ Merged & Compressed file: $out"
}

# --- Split video ---
split_video() {
    local file="$1"
    read -rp "Start time (HH:MM:SS, default 00:00:00): " start
    start=${start:-00:00:00}
    read -rp "End time (HH:MM:SS, default 00:01:00): " end
    end=${end:-00:01:00}
    local base=$(basename "$file")
    local out="$SPLIT_OUT_DIR/split_${base%.*}_$(date +%H%M%S).${base##*.}"
    ffmpeg -i "$file" -ss "$start" -to "$end" -c copy "$out"
    echo "✅ Split saved: $out"
}

# --- Convert video ---
convert_video() {
    local file="$1"
    read -rp "Video codec (Passthrough/libx264/libx265, default libx264): " vcodec
    vcodec=${vcodec:-libx264}
    read -rp "Audio codec (Passthrough/aac/mp3, default aac): " acodec
    acodec=${acodec:-aac}
    read -rp "Preset (fast/normal/slow, default fast): " preset
    preset=${preset:-fast}
    local base=$(basename "$file")
    local out="$CONVERT_OUT_DIR/${base%.*}.mkv"
    [[ "$vcodec" == "Passthrough" ]] && vcodec="copy"
    [[ "$acodec" == "Passthrough" ]] && acodec="copy"
    ffmpeg -i "$file" -c:v "$vcodec" -preset "$preset" -c:a "$acodec" "$out"
    echo "✅ Converted: $out"
}

# --- Create GIF ---
make_gif() {
    local file="$1"
    read -rp "Start time (HH:MM:SS, default 00:00:00): " start
    start=${start:-00:00:00}
    read -rp "Duration (seconds, default 5): " duration
    duration=${duration:-5}
    local base=$(basename "$file")
    local out="$GIF_OUT_DIR/${base%.*}_$(date +%H%M%S).gif"
    ffmpeg -ss "$start" -t "$duration" -i "$file" -vf "fps=15,scale=480:-1:flags=lanczos" "$out"
    echo "✅ GIF saved: $out"
}

# --- Create Thumbnail ---
make_thumbnail() {
    local file="$1"
    read -rp "Time for thumbnail (HH:MM:SS, default 00:00:05): " t
    t=${t:-00:00:05}
    local base=$(basename "$file")
    local out="$THUMB_OUT_DIR/${base%.*}_thumb.jpg"
    ffmpeg -ss "$t" -i "$file" -vframes 1 "$out"
    echo "✅ Thumbnail saved: $out"
}

# --- Show metadata ---
show_metadata() {
    ffprobe -hide_banner "$1"
}

# --- Collect video files safely ---
video_files=()
while IFS= read -r -d '' file; do
    video_files+=("$file")
done < <(find ~/Downloads ~/Videos -type f \( -iname "*.mp4" -o -iname "*.mkv" -o -iname "*.mov" -o -iname "*.avi" -o -iname "*.webm" \) -print0)

[[ ${#video_files[@]} -eq 0 ]] && { echo "❌ No video files found in ~/Downloads or ~/Videos."; exit 1; }

# --- Main menu with fzf ---
while true; do
    action=$(printf "%s\n" \
        "Merge videos" \
        "Merge & Compress videos" \
        "Split video" \
        "Convert video" \
        "Make GIF" \
        "Make thumbnail" \
        "Show metadata" \
        "Exit" | fzf --height=10 --border --prompt="Main Menu > ")

    case "$action" in
        "Merge videos")
            files=$(select_multiple_with_fzf "Select videos to merge" "${video_files[@]}")
            [[ -z "$files" ]] && continue
            merge_videos $files
            ;;
        "Merge & Compress videos")
            files=$(select_multiple_with_fzf "Select videos to merge & compress" "${video_files[@]}")
            [[ -z "$files" ]] && continue
            merge_and_compress $files
            ;;
        "Split video")
            file=$(select_multiple_with_fzf "Select single video" "${video_files[@]}" | head -n1)
            [[ -z "$file" ]] && continue
            split_video "$file"
            ;;
        "Convert video")
            file=$(select_multiple_with_fzf "Select single video" "${video_files[@]}" | head -n1)
            [[ -z "$file" ]] && continue
            convert_video "$file"
            ;;
        "Make GIF")
            file=$(select_multiple_with_fzf "Select single video" "${video_files[@]}" | head -n1)
            [[ -z "$file" ]] && continue
            make_gif "$file"
            ;;
        "Make thumbnail")
            file=$(select_multiple_with_fzf "Select single video" "${video_files[@]}" | head -n1)
            [[ -z "$file" ]] && continue
            make_thumbnail "$file"
            ;;
        "Show metadata")
            file=$(select_multiple_with_fzf "Select single video" "${video_files[@]}" | head -n1)
            [[ -z "$file" ]] && continue
            show_metadata "$file"
            ;;
        "Exit")
            break
            ;;
    esac
done
