#!/bin/bash
# usb-formatter-badblocks.sh
# WARNING: This will wipe all data on the specified device

DEVICE_RAW="$1"
FAST_SMART=false

if [[ -z "$DEVICE_RAW" ]]; then
    echo "Usage: sudo $0 <device> [--fast-smart]"
    echo "Example: sudo $0 sdb --fast-smart"
    exit 1
fi

if [[ "$2" == "--fast-smart" ]]; then
    FAST_SMART=true
fi

# Prepend /dev/ if not present
if [[ "$DEVICE_RAW" =~ ^/dev/ ]]; then
    DEVICE="$DEVICE_RAW"
else
    DEVICE="/dev/$DEVICE_RAW"
fi

# Confirm device exists
if [[ ! -b "$DEVICE" ]]; then
    echo "❌ Device $DEVICE does not exist."
    exit 1
fi

echo "⚠️ WARNING: This will wipe all data on $DEVICE!"
read -p "Type 'yes' to continue: " CONFIRM
if [[ "$CONFIRM" != "yes" ]]; then
    echo "Aborted."
    exit 1
fi

# Step 1: Wipe old filesystem signatures
echo "=== Removing old filesystem signatures ==="
sudo wipefs -a "$DEVICE"

# Step 2: Format ext4 and check for bad blocks
echo "=== Formatting $DEVICE as ext4 and scanning for bad blocks ==="
sudo mkfs.ext4 -c -L media "$DEVICE"

# Step 3: Mount to ~/mount/usb
MOUNT_DIR="$HOME/mount/usb"
sudo mkdir -p "$MOUNT_DIR"
sudo mount "$DEVICE" "$MOUNT_DIR"

echo "✅ $DEVICE formatted as ext4, scanned for bad blocks, and mounted at $MOUNT_DIR"

# Step 4: Detect correct smartctl driver for USB
DRIVER=""
for d in sat scsi usbjmicron; do
    if sudo smartctl -i -d "$d" "$DEVICE" &>/dev/null; then
        DRIVER=$d
        break
    fi
done

if [[ -z "$DRIVER" ]]; then
    DRIVER="sat"
fi

echo "🔍 Using SMART driver: $DRIVER for $DEVICE"

# Step 5: Run short SMART test if not in fast mode
if ! $FAST_SMART; then
    echo "⏳ Attempting short self-test..."
    sudo smartctl -d "$DRIVER" -t short "$DEVICE" &>/dev/null
    echo "⌛ Waiting ~2 minutes for test to complete..."
    sleep 130
else
    echo "⚡ Fast SMART mode: skipping self-test."
fi

# Step 6: Read and summarize SMART attributes
echo "📊 Reading SMART attributes..."
REALLOC=UNCORRECT=TEMP=WEAR=LBAS_WR=LBAS_RD="N/A"

sudo smartctl -d "$DRIVER" -A "$DEVICE" 2>/dev/null | while read -r line; do
    [[ "$line" =~ ^[[:space:]]*ID# ]] && continue
    [[ -z "$line" ]] && continue
    attr_name=$(echo "$line" | awk '{print $2}')
    raw_value=$(echo "$line" | awk '{print $10}' | cut -d'(' -f1)
    case "$attr_name" in
        Reallocated_Sector_Ct) REALLOC="$raw_value" ;;
        Reported_Uncorrect) UNCORRECT="$raw_value" ;;
        Temperature_Celsius) TEMP="$raw_value" ;;
        Media_Wearout_Indicator) WEAR="$raw_value" ;;
        Total_LBAs_Written) LBAS_WR="$raw_value" ;;
        Total_LBAs_Read) LBAS_RD="$raw_value" ;;
    esac
done

# Step 7: Output SMART summary
echo
echo "=== SMART Summary for $DEVICE ==="
echo "Reallocated_Sector_Ct:    $REALLOC"
echo "Reported_Uncorrect:       $UNCORRECT"
echo "Temperature_Celsius:      $TEMP°C"
echo "Media_Wearout_Indicator:  $WEAR"
echo "Total_LBAs_Written:       $LBAS_WR"
echo "Total_LBAs_Read:          $LBAS_RD"
echo "==============================="
