#!/bin/bash

print_paired_devices() {
    mapfile -t lines <<< "$(bluetoothctl devices)"
    if [[ ${#lines[@]} -eq 0 ]]; then
        echo "❌ No paired devices found."
        return 1
    fi

    echo "📋 Paired Devices:"
    for i in "${!lines[@]}"; do
        mac=$(echo "${lines[$i]}" | awk '{print $2}')
        name=$(echo "${lines[$i]}" | cut -d' ' -f3-)
        echo "[$i] $name ($mac)"
    done

    read -p "👉 Select a device [0-$((${#lines[@]} - 1))]: " choice
    if ! [[ "$choice" =~ ^[0-9]+$ ]] || (( choice < 0 || choice >= ${#lines[@]} )); then
        echo "❌ Invalid selection."
        return 1
    fi

    selected_mac=$(echo "${lines[$choice]}" | awk '{print $2}')
    selected_name=$(echo "${lines[$choice]}" | cut -d' ' -f3-)
    return 0
}

scan_and_pair_device() {
    echo "🔍 Powering on Bluetooth adapter and scanning for 15 seconds..."

    # Create temp commands file
    cmds=$(mktemp)

    cat > "$cmds" <<-EOF
    power on
    agent on
    default-agent
    scan on
    EOF

    # Start bluetoothctl with commands from file in background
    bluetoothctl < "$cmds" &

    SCAN_PID=$!
    sleep 15

    # Now stop scanning properly
    bluetoothctl scan off

    kill $SCAN_PID 2>/dev/null
    rm -f "$cmds"

    # Wait a moment for device list to update
    sleep 2

    echo "📡 Devices found during scan:"
    mapfile -t all_devices <<< "$(bluetoothctl devices)"

    if [[ ${#all_devices[@]} -eq 0 ]]; then
        echo "❌ No devices found."
        return 1
    fi

    for i in "${!all_devices[@]}"; do
        mac=$(echo "${all_devices[$i]}" | awk '{print $2}')
        name=$(echo "${all_devices[$i]}" | cut -d' ' -f3-)
        echo "[$i] $name ($mac)"
    done

    read -p "👉 Select a device to pair [0-$((${#all_devices[@]} - 1))]: " choice
    if ! [[ "$choice" =~ ^[0-9]+$ ]] || (( choice < 0 || choice >= ${#all_devices[@]} )); then
        echo "❌ Invalid selection."
        return 1
    fi

    mac=$(echo "${all_devices[$choice]}" | awk '{print $2}')
    name=$(echo "${all_devices[$choice]}" | cut -d' ' -f3-)

    echo "🔗 Pairing and connecting to $name ($mac)..."
    bluetoothctl << EOF
agent on
default-agent
pair $mac
trust $mac
connect $mac
EOF

    if bluetoothctl paired-devices | grep -q "$mac"; then
        echo "✅ Successfully paired and connected to $name ($mac)."
    else
        echo "❌ Failed to pair/connect to $name ($mac)."
        return 1
    fi
}


restart_bluetooth() {
    echo "🛑 Killing all bluetoothctl and bluetoothd processes..."
    pkill -9 bluetoothctl 2>/dev/null
    pkill -9 bluetoothd 2>/dev/null

    echo "🔄 Restarting Bluetooth service..."
    if systemctl is-active --quiet bluetooth; then
        sudo systemctl restart bluetooth && echo "✅ Bluetooth service restarted."
    else
        sudo systemctl start bluetooth && echo "✅ Bluetooth service started."
    fi

    sleep 2
}

main_menu() {
    echo ""
    echo "🎮 Bluetooth Action Menu:"
    echo "1. Connect to a paired device"
    echo "2. Disconnect from a paired device"
    echo "3. Remove (unpair) a device"
    echo "4. Scan and pair a new device"
    echo "5. Exit"
    echo "6. Restart Bluetooth service (kill & relaunch processes)"
    echo ""
    read -p "Choose an action [1-6]: " action
}

clear
echo "🔧 Bluetooth Device Manager"

while true; do
    main_menu

    case "$action" in
        1)
            if print_paired_devices; then
                echo "🔗 Connecting to $selected_name ($selected_mac)..."
                bluetoothctl connect "$selected_mac"
            fi
            ;;
        2)
            if print_paired_devices; then
                echo "🔌 Disconnecting from $selected_name ($selected_mac)..."
                bluetoothctl disconnect "$selected_mac"
            fi
            ;;
        3)
            if print_paired_devices; then
                echo "❌ Removing $selected_name ($selected_mac)..."
                bluetoothctl remove "$selected_mac"
            fi
            ;;
        4)
            scan_and_pair_device
            ;;
        5)
            echo "👋 Bye!"
            exit 0
            ;;
        6)
            restart_bluetooth
            ;;
        *)
            echo "❌ Invalid option."
            ;;
    esac

    echo ""
    read -p "Press Enter to return to menu..."
    clear
done

