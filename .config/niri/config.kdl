// This config is in the KDL format: https://kdl.dev
// "/-" comments out the following node.
// Check the wiki for a full description of the configuration:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Overview

// Input device configuration.
// Find the full list of options on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Input

//cursor {
//    xcursor-theme "Bibata-Modern-Ice"
//    xcursor-size 28
//    hide-when-typing
//    hide-after-inactive-ms 5000
// }

// hotkey-overlay {
//     skip-at-startup
// }
//
// cursor {
//     xcursor-theme "catppuccin-frappe-lavender-cursors"
// }
//

input {
    keyboard {
        track-layout "global"
        repeat-delay 350
        repeat-rate 30
        xkb {
            layout "us,de"
            options "grp:alt_shift_toggle"
        }
    }

    // Next sections include libinput settings.
    // Omitting settings disables them, or leaves them at their default values.
    touchpad {
        // off
        tap
        // dwt
        // dwtp
        natural-scroll
        // accel-speed 0.3
        // accel-profile "flat"
        scroll-method "two-finger"
        // disabled-on-external-mouse
    }

    mouse {
        // off
        // natural-scroll
        accel-speed -0.1
        accel-profile "adaptive"
        // scroll-method "no-scroll"
    }

    // Uncomment this to make the mouse warp to the center of newly focused windows.
    // warp-mouse-to-focus

    // Focus windows and outputs automatically when moving the mouse into them.
    focus-follows-mouse max-scroll-amount="10%"

  workspace-auto-back-and-forth
  }

  gestures {
  hot-corners {
    off
  }
}

debug {
    render-drm-device "/dev/dri/renderD128"
}

	output "eDP-1" {
    mode "2560x1600"
	scale 1.75
    position x=0 y=0
 }

// environment {
//    DISPLAY ":1"
//    QT_QPA_PLATFORM "wayland"
// }

 // environment {
 //    DISPLAY ":0"
 // }
 //
// Environment Variables
 environment {
   QT_QPA_PLATFORM "wayland"
   ELECTRON_OZONE_PLATFORM_HINT "auto"
   EDITOR "nvim"
   MOZ_ENABLE_WAYLAND "1" 
   DISPLAY ":0"
 }
//


switch-events {
    lid-close {spawn "hyprlock";}
}


/*
██╗      █████╗ ██╗   ██╗ ██████╗ ██╗   ██╗████████╗
██║     ██╔══██╗╚██╗ ██╔╝██╔═══██╗██║   ██║╚══██╔══╝
██║     ███████║ ╚████╔╝ ██║   ██║██║   ██║   ██║
██║     ██╔══██║  ╚██╔╝  ██║   ██║██║   ██║   ██║
███████╗██║  ██║   ██║   ╚██████╔╝╚██████╔╝   ██║
╚══════╝╚═╝  ╚═╝   ╚═╝    ╚═════╝  ╚═════╝    ╚═╝
*/
layout {
  gaps 9
  center-focused-column "never"

  preset-column-widths {
    proportion 0.25
    proportion 0.5
    proportion 0.75
    proportion 1.0
  }

  preset-window-heights {
    proportion 0.2
    proportion 0.4
    proportion 0.5
    proportion 0.6
    proportion 0.8
  }

  default-column-width { 
    proportion 0.5
  }

  focus-ring {
    width 2
    active-color "#cba6f7"
    inactive-color "#45475A"
  }

  border {
    off
  }

  shadow {
    on
    softness 20
    spread 7
    offset x=-1 y=-5
    color "#0009"
  }
  struts {}
}

// NOTE: Animations
/*
 █████╗ ███╗   ██╗██╗███╗   ███╗ █████╗ ████████╗██╗ ██████╗ ███╗   ██╗
██╔══██╗████╗  ██║██║████╗ ████║██╔══██╗╚══██╔══╝██║██╔═══██╗████╗  ██║
███████║██╔██╗ ██║██║██╔████╔██║███████║   ██║   ██║██║   ██║██╔██╗ ██║
██╔══██║██║╚██╗██║██║██║╚██╔╝██║██╔══██║   ██║   ██║██║   ██║██║╚██╗██║
██║  ██║██║ ╚████║██║██║ ╚═╝ ██║██║  ██║   ██║   ██║╚██████╔╝██║ ╚████║
╚═╝  ╚═╝╚═╝  ╚═══╝╚═╝╚═╝     ╚═╝╚═╝  ╚═╝   ╚═╝   ╚═╝ ╚═════╝ ╚═╝  ╚═══╝
*/
animations {
  off
  slowdown 0.6

  window-open {
    duration-ms 200
    curve "linear"
    custom-shader r"

    vec4 expanding_circle(vec3 coords_geo, vec3 size_geo) {
      vec3 coords_tex = niri_geo_to_tex * coords_geo;
      vec4 color = texture2D(niri_tex, coords_tex.st);
      vec2 coords = (coords_geo.xy - vec2(0.5, 0.5)) * size_geo.xy * 2.0;
      coords = coords / length(size_geo.xy);
      float p = niri_clamped_progress;
      if (p * p <= dot(coords, coords))
      color = vec4(0.0);

      return color;
    }

    vec4 open_color(vec3 coords_geo, vec3 size_geo) {
      return expanding_circle(coords_geo, size_geo);
    }
    "
  }


  window-close {
    duration-ms 175
    curve "linear"
    custom-shader r"
    vec4 shrinking_circle(vec3 coords_geo, vec3 size_geo) {
      vec3 coords_tex = niri_geo_to_tex * coords_geo;
      vec4 color = texture2D(niri_tex, coords_tex.st);
      // Calculate coordinates relative to center, scaled appropriately
      vec2 coords = (coords_geo.xy - vec2(0.5, 0.5)) * size_geo.xy * 2.0;
      // Normalize coordinates based on diagonal length for a circular shape
      coords = coords / length(size_geo.xy);

      // Invert the progress for closing effect: 1 -> 0
      float p_close = 1.0 - niri_clamped_progress;

      // If pixel's squared distance from center is >= shrinking radius squared, make transparent
      // (Keeps pixels *inside* the shrinking radius p_close)
      if (p_close * p_close <= dot(coords, coords))
      color = vec4(0.0);

      // Optional: You could also fade the alpha slightly faster at the end if desired
      // color.a *= p_close; // Fades out completely as radius reaches 0

      return color;
    }

    vec4 close_color(vec3 coords_geo, vec3 size_geo) {
      return shrinking_circle(coords_geo, size_geo);
    }"
  }

  window-resize {
  }
}


/*
 NOTE: Workspace 
*/
workspace "1"
workspace "2"
workspace "3"
// workspace "4"
// workspace "5"
// workspace "6"
// workspace "7"
// workspace "8"
// workspace "9"
// workspace "0"

/*

[[ Layer Rule ]]

*/ 
layer-rule {
  match namespace="^launcher$"
  opacity 1.0
}

layer-rule {
  //  eww
    match namespace="gtk-layer-shell"
    match at-startup=true
    shadow {
        on
        softness 10
        spread 1
        offset x=0 y=1
        draw-behind-window true
        color "#00000030"
    }
}

layer-rule {
  //  eww
    match namespace="rofi"
    match at-startup=true
    shadow {
        on
        softness 10
        spread 1
        offset x=0 y=1
        draw-behind-window true
        color "#00000030"
    }
}


layer-rule {
    match namespace="waybar"
    match at-startup=true
    opacity 0.8
    shadow {
        on
        softness 10
        spread 10
        offset x=0 y=5
    }
    geometry-corner-radius 10
    }



/*

██╗    ██╗██╗███╗   ██╗██████╗  ██████╗ ██╗    ██╗    ██████╗ ██╗   ██╗██╗     ███████╗███████╗
██║    ██║██║████╗  ██║██╔══██╗██╔═══██╗██║    ██║    ██╔══██╗██║   ██║██║     ██╔════╝██╔════╝
██║ █╗ ██║██║██╔██╗ ██║██║  ██║██║   ██║██║ █╗ ██║    ██████╔╝██║   ██║██║     █████╗  ███████╗
██║███╗██║██║██║╚██╗██║██║  ██║██║   ██║██║███╗██║    ██╔══██╗██║   ██║██║     ██╔══╝  ╚════██║
╚███╔███╔╝██║██║ ╚████║██████╔╝╚██████╔╝╚███╔███╔╝    ██║  ██║╚██████╔╝███████╗███████╗███████║
 ╚══╝╚══╝ ╚═╝╚═╝  ╚═══╝╚═════╝  ╚═════╝  ╚══╝╚══╝     ╚═╝  ╚═╝ ╚═════╝ ╚══════╝╚══════╝╚══════╝
*/ 
window-rule {
  match title="^(file_progress)$"
  match title="^(confirm)$"
  match title="^(dialog)$"
  match title="^(download)$"
  match title="^(notification )$"
  match title="^(error)$"
  match title="^(splash)$"
  match title="^(nwg-look)$"
  match title="^(confirmreset)$"
  match title="^(Delete profile)$"
  match title="^File Operation Progress$"
  match title="^Confirm to replace files$"
  match title="^KDE Connect URL handler$"
  match title="^(Open File)(.*)$"
  match title="^(Select a File)(.*)$"
  match title="^(Choose wallpaper)(.*)$"
  match title="^(Open Folder)(.*)$"
  match title="^(Save As)(.*)$"
  match title="^(Library)(.*)$"
  match title="^(File Upload)(.*)$"
  match title="^(hyprland-share-picker)$"
  match title="^(.*)-Google$"
  match title="^(.*)System Update$"
  match title="(.*) - Google (.*) - (.*)"
  
  match app-id="^xdm-app$"
  match app-id="^org.qbittorrent.qBittorrent$"
  match app-id="^org.pulseaudio.pavucontrol$"
  match app-id="^net.davidotek.pupgui2$"
  
  open-floating true
}

window-rule {
  match app-id=r#"zen$"# title="^Picture-in-Picture$"
  open-floating true
}

window-rule {
    match app-id=r#"browser"# title="^Picture-in-Picture$"
    open-floating true
}


// Work around WezTerm's initial configure bug
// by setting an empty default-column-width.
window-rule {
    // This regular expression is intentionally made as specific as possible,
    // since this is the default config, and we want no false positives.
    // You can get away with just app-id="wezterm" if you want.
    match app-id=r#"^org\.wezfurlong\.wezterm$"#
    default-column-width {}
}

// Needed for steam, read wiki for more
window-rule {
  match app-id="steam" title=r#"^notificationtoasts_\d+_desktop$"#
  default-floating-position x=10 y=10 relative-to="bottom-right"
}

window-rule {
  match app-id="org.telegram.desktop$"
  match app-id="zen$"
  match app-id="vesktop$"
  match app-id="thunar$"
  match app-id="obsidian$"
  match app-id="com.github.th_ch.youtube_music"
  match app-id="Postman"
  match app-id="Spotify"
  match app-id="Element"

  open-maximized true
   
}

window-rule {
  match app-id="mpv$"

  open-fullscreen true
}

window-rule {
    geometry-corner-radius 0
    clip-to-geometry true
}


/*
[[ App Rules ]]
*/ 

window-rule {
  draw-border-with-background false
  match app-id="kitty$"
  match app-id="com.mitchellh.ghostty$"
  // opacity 0.70
}

window-rule {
  match app-id="zen$"
  open-on-workspace "1"
}

window-rule {
  match app-id="Postman$"
  open-on-workspace "2"
}

window-rule {
  match app-id="^thunar$"
  open-on-workspace "6"
}

window-rule{
    match app-id="^obsidian$"
    open-on-workspace "7"
}

window-rule {
  match app-id="com.github.th_ch.youtube_music$"
  match app-id="Spotify"
  open-on-workspace "8"
}

window-rule {
  match app-id=r#"^vesktop$"#
  open-on-workspace "9"
}

window-rule {
  match app-id=r#"^org.telegram.desktop$"#
  open-on-workspace "0"
}

/*
██╗  ██╗███████╗██╗   ██╗██████╗ ██╗███╗   ██╗██████╗ ███████╗
██║ ██╔╝██╔════╝╚██╗ ██╔╝██╔══██╗██║████╗  ██║██╔══██╗██╔════╝
█████╔╝ █████╗   ╚████╔╝ ██████╔╝██║██╔██╗ ██║██║  ██║███████╗
██╔═██╗ ██╔══╝    ╚██╔╝  ██╔══██╗██║██║╚██╗██║██║  ██║╚════██║
██║  ██╗███████╗   ██║   ██████╔╝██║██║ ╚████║██████╔╝███████║
╚═╝  ╚═╝╚══════╝   ╚═╝   ╚═════╝ ╚═╝╚═╝  ╚═══╝╚═════╝ ╚══════╝
*/

spawn-at-startup "swaync"
spawn-at-startup "waybar"
// spawn-at-startup "/usr/lib/polkit-kde-authentication-agent-1"
spawn-at-startup "swaybg" "-i" "/home/rey/Pictures/wallpapers/konoha1.jpg" "-m" "fill"
spawn-at-startup "wl-paste" "--watch" "cliphist" "store"
spawn-at-startup "xwayland-satellite"
spawn-at-startup "swayidle" "-w"
spawn-at-startup "systemctl" "--user" "start" "xdg-desktop-portal-wlr"

prefer-no-csd
screenshot-path "~/Pictures/Screenshots/ from %Y-%m-%d %H-%M-%S.png"

window-rule {
    match app-id="waybar"
    opacity 0.7
}
window-rule {
draw-border-with-background false
    match app-id="foot"
    match app-id="kitty"
    match app-id="thunar"
    match app-id="org.gnome.Nautilus"
    match app-id="chromium"
    match app-id="zathura"
	match app-id="Brave-browser"
    match app-id="tsuzuku"
    opacity 0.95
}

window-rule {
    match app-id="foot"
    default-column-width { proportion 0.8; }
}

window-rule {
    match app-id="org.gnome.Characters"
    default-column-width { proportion 0.4; }
}

window-rule {
    match app-id="Brave-browser"
    open-maximized true
}


// Example: block out two password managers from screen capture.
// (This example rule is commented out with a "/-" in front.)
/-window-rule {
    match app-id=r#"^org\.keepassxc\.KeePassXC$"#
    match app-id=r#"^org\.gnome\.World\.Secrets$"#

    block-out-from "screen-capture"

    // Use this instead if you want them visible on third-party screenshot tools.
    // block-out-from "screencast"
}

binds {
	Mod+Shift+Slash { show-hotkey-overlay; }
    Mod+Return { spawn "foot"; }
    Mod+SPACE { spawn "fuzzel"; }
    Super+Alt+L { spawn "hyprlock"; }
	Mod+B { spawn "~/bin/brave-arm.sh"; }
	//Mod+B { spawn "brave-browser"; }

	// Mod+G { spawn "foot" "-e" "bash" "-c" "wow.sh"; }
	Mod+Escape { spawn "foot" "-e" "btop"; }
	// Mod+V { spawn "bash" "-c" "pkill fuzzel || cliphist list | fuzzel  --match-mode fzf --dmenu --anchor center --lines 15 --width 80 | cliphist decode | wl-copy"; }
	Mod+E { spawn "~/bin/fuzzel-emoji"; }

    XF86AudioRaiseVolume allow-when-locked=true {
        spawn "sh" "-c" "$HOME/.config/hypr/scripts/Volume.sh --inc";
    }
    XF86AudioLowerVolume allow-when-locked=true {
        spawn "sh" "-c" "$HOME/.config/hypr/scripts/Volume.sh --dec";
    }
    XF86AudioMicMute      allow-when-locked=true {
        spawn "sh" "-c" "$HOME/.config/hypr/scripts/Volume.sh --toggle-mic";
    }
    XF86AudioMute         allow-when-locked=true {
        spawn "sh" "-c" "$HOME/.config/hypr/scripts/Volume.sh --toggle";
    }
    XF86Sleep allow-when-locked=true { spawn "systemctl" "suspend"; }
    XF86RFKill allow-when-locked=true {
        spawn "sh" "-c" "$HOME/.config/hypr/scripts/AirplaneMode.sh";
    }

    XF86KbdBrightnessDown allow-when-locked=true {
        spawn "sh" "-c" "$HOME/.config/hypr/scripts/BrightnessKbd.sh --dec";
    }
    XF86KbdBrightnessUp allow-when-locked=true {
        spawn "sh" "-c" "$HOME/.config/hypr/scripts/BrightnessKbd.sh --inc";
    }
    XF86MonBrightnessDown allow-when-locked=true {
        spawn "sh" "-c" "$HOME/.config/hypr/scripts/Brightness.sh --dec";
    }
    XF86MonBrightnessUp allow-when-locked=true {
        spawn "sh" "-c" "$HOME/.config/hypr/scripts/Brightness.sh --inc";
    }
    
	Mod+Print                     { spawn "sh" "-c" "$HOME/.config/hypr/scripts/ScreenShot.sh --now";   }
    Mod+Shift+Print               { spawn "sh" "-c" "$HOME/.config/hypr/scripts/ScreenShot.sh --area";  }
    Mod+Control+Print             { spawn "sh" "-c" "$HOME/.config/hypr/scripts/ScreenShot.sh --in5";   }
    Mod+Control+Shift+Print       { spawn "sh" "-c" "$HOME/.config/hypr/scripts/ScreenShot.sh --in10";  }
    Alt+Print                     { spawn "sh" "-c" "$HOME/.config/hypr/scripts/ScreenShot.sh --active";}

    Mod+S { spawn "sh" "-c" "$HOME/.config/hypr/scripts/ScreenShot.sh --swappy"; }
    Mod+O { spawn "sh" "-c" "~/bin/ocr"; }
	Mod+R { spawn "foot" "-e" "sh" "-c" "~/bin/runner"; }


	XF86AudioNext        allow-when-locked=true { spawn "playerctl" "next"; }
    XF86AudioPrev        allow-when-locked=true { spawn "playerctl" "previous"; }
    XF86AudioPlay        allow-when-locked=true { spawn "playerctl" "play-pause"; }

    Mod+Q { close-window; }

    Mod+Left  { focus-column-left; }
    Mod+Down  { focus-window-down; }
    Mod+Up    { focus-window-up; }
    Mod+Right { focus-column-right; }
    //Mod+H     { focus-column-left; }
    //Mod+J     { focus-window-down; }
    //Mod+K     { focus-window-up; }
    //Mod+L     { focus-column-right; }

    Mod+Ctrl+Left  { move-column-left; }
    Mod+Ctrl+Down  { move-window-down; }
    Mod+Ctrl+Up    { move-window-up; }
    Mod+Ctrl+Right { move-column-right; }
    //Mod+Ctrl+H     { move-column-left; }
    //Mod+Ctrl+J     { move-window-down; }
    //Mod+Ctrl+K     { move-window-up; }
    //Mod+Ctrl+L     { move-column-right; }

    // Alternative commands that move across workspaces when reaching
    // the first or last window in a column.
    // Mod+J     { focus-window-or-workspace-down; }
    // Mod+K     { focus-window-or-workspace-up; }
    // Mod+Ctrl+J     { move-window-down-or-to-workspace-down; }
    // Mod+Ctrl+K     { move-window-up-or-to-workspace-up; }

	Mod+J     { focus-window-or-workspace-down; }
    Mod+K     { focus-window-or-workspace-up; }
    Mod+Shift+J     { move-window-down-or-to-workspace-down; }
    Mod+Shift+L     { move-window-up-or-to-workspace-up; }

    Mod+Home { focus-column-first; }
    Mod+End  { focus-column-last; }
    Mod+Ctrl+Home { move-column-to-first; }
    Mod+Ctrl+End  { move-column-to-last; }

    Mod+Shift+Left  { focus-monitor-left; }
    Mod+Shift+Down  { focus-monitor-down; }
    Mod+Shift+Up    { focus-monitor-up; }
    Mod+Shift+Right { focus-monitor-right; }
    //Mod+Shift+H     { focus-monitor-left; }
    //Mod+Shift+J     { focus-monitor-down; }
    //Mod+Shift+K     { focus-monitor-up; }
    //Mod+Shift+L     { focus-monitor-right; }

    Mod+Shift+Ctrl+Left  { move-column-to-monitor-left; }
    Mod+Shift+Ctrl+Down  { move-column-to-monitor-down; }
    Mod+Shift+Ctrl+Up    { move-column-to-monitor-up; }
    Mod+Shift+Ctrl+Right { move-column-to-monitor-right; }
    //Mod+Shift+Ctrl+H     { move-column-to-monitor-left; }
    //Mod+Shift+Ctrl+J     { move-column-to-monitor-down; }
    //Mod+Shift+Ctrl+K     { move-column-to-monitor-up; }
    //Mod+Shift+Ctrl+L     { move-column-to-monitor-right; }

    // Alternatively, there are commands to move just a single window:
    // Mod+Shift+Ctrl+Left  { move-window-to-monitor-left; }
    // ...

    // And you can also move a whole workspace to another monitor:
    // Mod+Shift+Ctrl+Left  { move-workspace-to-monitor-left; }
    // ...

    Mod+Page_Down      { focus-workspace-down; }
    Mod+Page_Up        { focus-workspace-up; }
    //Mod+U              { focus-workspace-down; }
    //Mod+I              { focus-workspace-up; }
    Mod+Ctrl+Page_Down { move-column-to-workspace-down; }
    Mod+Ctrl+Page_Up   { move-column-to-workspace-up; }
    //Mod+Ctrl+U         { move-column-to-workspace-down; }
    //Mod+Ctrl+I         { move-column-to-workspace-up; }

    // Alternatively, there are commands to move just a single window:
    // Mod+Ctrl+Page_Down { move-window-to-workspace-down; }
    // ...

    Mod+Shift+Page_Down { move-workspace-down; }
    Mod+Shift+Page_Up   { move-workspace-up; }
    //Mod+Shift+U         { move-workspace-down; }
    //Mod+Shift+I         { move-workspace-up; }

    // You can bind mouse wheel scroll ticks using the following syntax.
    // These binds will change direction based on the natural-scroll setting.
    //
    // To avoid scrolling through workspaces really fast, you can use
    // the cooldown-ms property. The bind will be rate-limited to this value.
    // You can set a cooldown on any bind, but it's most useful for the wheel.
    Mod+WheelScrollDown      cooldown-ms=150 { focus-workspace-down; }
    Mod+WheelScrollUp        cooldown-ms=150 { focus-workspace-up; }
    Mod+Ctrl+WheelScrollDown cooldown-ms=150 { move-column-to-workspace-down; }
    Mod+Ctrl+WheelScrollUp   cooldown-ms=150 { move-column-to-workspace-up; }

    //Mod+WheelScrollRight      { focus-column-right; }
    //Mod+WheelScrollLeft       { focus-column-left; }
    //Mod+Ctrl+WheelScrollRight { move-column-right; }
    //Mod+Ctrl+WheelScrollLeft  { move-column-left; }

    // Usually scrolling up and down with Shift in applications results in
    // horizontal scrolling; these binds replicate that.
    Mod+Shift+WheelScrollDown      { focus-column-right; }
    Mod+Shift+WheelScrollUp        { focus-column-left; }
    Mod+Ctrl+Shift+WheelScrollDown { move-column-right; }
    Mod+Ctrl+Shift+WheelScrollUp   { move-column-left; }

    // Similarly, you can bind touchpad scroll "ticks".
    // Touchpad scrolling is continuous, so for these binds it is split into
    // discrete intervals.
    // These binds are also affected by touchpad's natural-scroll, so these
    // example binds are "inverted", since we have natural-scroll enabled for
    // touchpads by default.
    // Mod+TouchpadScrollDown { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.02+"; }
    // Mod+TouchpadScrollUp   { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.02-"; }

    // You can refer to workspaces by index. However, keep in mind that
    // niri is a dynamic workspace system, so these commands are kind of
    // "best effort". Trying to refer to a workspace index bigger than
    // the current workspace count will instead refer to the bottommost
    // (empty) workspace.
    //
    // For example, with 2 workspaces + 1 empty, indices 3, 4, 5 and so on
    // will all refer to the 3rd workspace.
    Mod+1 { focus-workspace 1; }
    Mod+2 { focus-workspace 2; }
    Mod+3 { focus-workspace 3; }
    Mod+4 { focus-workspace 4; }
    Mod+5 { focus-workspace 5; }
    Mod+6 { focus-workspace 6; }
    Mod+7 { focus-workspace 7; }
    Mod+8 { focus-workspace 8; }
    Mod+9 { focus-workspace 9; }
    Mod+Shift+1 { move-window-to-workspace 1; }
    Mod+Shift+2 { move-window-to-workspace 2; }
    Mod+Shift+3 { move-window-to-workspace 3; }
    Mod+Shift+4 { move-window-to-workspace 4; }
    Mod+Shift+5 { move-window-to-workspace 5; }
    Mod+Shift+6 { move-window-to-workspace 6; }
    Mod+Shift+7 { move-window-to-workspace 7; }
    Mod+Shift+8 { move-window-to-workspace 8; }
    Mod+Shift+9 { move-window-to-workspace 9; }

    // Alternatively, there are commands to move just a single window:
    // Mod+Ctrl+1 { move-window-to-workspace 1; }

    // Switches focus between the current and the previous workspace.
    // Mod+Tab { focus-workspace-previous; }
	Mod+Tab repeat=false { toggle-overview; }

    Mod+Comma  { consume-window-into-column; }
    Mod+Period { expel-window-from-column; }

    // There are also commands that consume or expel a single window to the side.
    Mod+BracketLeft  { consume-or-expel-window-left; }
    Mod+BracketRight { consume-or-expel-window-right; }

    // Mod+R { switch-preset-column-width; }
    Mod+Ctrl+R { reset-window-height; }
    Mod+F { maximize-column; }
    Mod+Shift+F { fullscreen-window; }
    Mod+C { center-column; }

    // Finer width adjustments.
    // This command can also:
    // * set width in pixels: "1000"
    // * adjust width in pixels: "-5" or "+5"
    // * set width as a percentage of screen width: "25%"
    // * adjust width as a percentage of screen width: "-10%" or "+10%"
    // Pixel sizes use logical, or scaled, pixels. I.e. on an output with scale 2.0,
    // set-column-width "100" will make the column occupy 200 physical screen pixels.
    Mod+Minus { set-column-width "-10%"; }
    Mod+Equal { set-column-width "+10%"; }

    // Finer height adjustments when in column with other windows.
    Mod+Shift+Minus { set-window-height "-10%"; }
    Mod+Shift+Equal { set-window-height "+10%"; }

   // Mod+Space       { switch-layout "next"; }
    // Mod+Shift+Space { switch-layout "prev"; }
	
	// Mod+ { switch-layout "next"; }

	Mod+W       { toggle-window-floating; }
    Mod+Shift+W { switch-focus-between-floating-and-tiling; }

    Print { screenshot; }
    Mod+Shift+S { screenshot; }
    Ctrl+Print { screenshot-screen; }
    // Alt+Print { screenshot-window; }

    // The quit action will show a confirmation dialog to avoid accidental exits.
    Mod+Shift+E { quit; }

    // Powers off the monitors. To turn them back on, do any input like
    // moving the mouse or pressing any other key.
    Mod+Shift+P { power-off-monitors; }
}
